<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\DashboardController;
use App\Http\Controllers\AuthController;
use App\Http\Controllers\UserController;
use App\Http\Controllers\SecteurController;
use App\Http\Controllers\StatistiquesController;
use App\Http\Controllers\Auth\LoginController;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
*/

// Routes d'authentification
Route::get('/', function () {
    return redirect()->route('login');
});

Route::get('/login', [LoginController::class, 'showLoginForm'])->name('login');
Route::post('/login', [LoginController::class, 'login'])->middleware('throttle-login');
Route::post('/logout', [LoginController::class, 'logout'])->name('logout');

// Routes protégées
Route::middleware(['auth', 'audit', 'email-2fa'])->group(function () {
    Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');

    // Routes admin
    Route::prefix('admin')->name('admin.')->middleware(['auth', 'audit'])->group(function () {
        Route::get('producteurs/{producteur}/documents/{document}/pdf', [\App\Http\Controllers\ProducteurDocumentController::class, 'generatePdf'])->name('admin.producteurs.documents.pdf');
        Route::resource('users', UserController::class);
        Route::patch('users/{user}/toggle-status', [UserController::class, 'toggleStatus'])->name('users.toggle-status');
        
        Route::resource('secteurs', SecteurController::class);
        Route::resource('cooperatives', \App\Http\Controllers\CooperativeController::class);
        Route::resource('producteurs', \App\Http\Controllers\ProducteurController::class);
        Route::resource('producteurs.documents', \App\Http\Controllers\ProducteurDocumentController::class);
        
        // Gestion Logistique
        Route::resource('centres-collecte', \App\Http\Controllers\CentreCollecteController::class);
        Route::resource('connaissements', \App\Http\Controllers\ConnaissementController::class);
        Route::get('connaissements/{connaissement}/program', [\App\Http\Controllers\ConnaissementController::class, 'program'])->name('connaissements.program');
        Route::post('connaissements/{connaissement}/program', [\App\Http\Controllers\ConnaissementController::class, 'storeProgram'])->name('connaissements.store-program');
        Route::get('connaissements/{connaissement}/validate', [\App\Http\Controllers\ConnaissementController::class, 'validate'])->name('connaissements.validate');
        Route::post('connaissements/{connaissement}/validate', [\App\Http\Controllers\ConnaissementController::class, 'storeValidation'])->name('connaissements.store-validation');
        
        // Tickets de Pesée
        Route::resource('tickets-pesee', \App\Http\Controllers\TicketPeseeController::class)->parameters([
            'tickets-pesee' => 'ticketPesee'
        ]);
        Route::patch('tickets-pesee/{ticketPesee}/validate', [\App\Http\Controllers\TicketPeseeController::class, 'validate'])->name('tickets-pesee.validate');
        Route::patch('tickets-pesee/{ticketPesee}/cancel-validation', [\App\Http\Controllers\TicketPeseeController::class, 'cancelValidation'])->name('tickets-pesee.cancel-validation');
        Route::patch('tickets-pesee/{ticketPesee}/archive', [\App\Http\Controllers\TicketPeseeController::class, 'archive'])->name('tickets-pesee.archive');
        Route::get('tickets-pesee/{ticketPesee}/pdf', [\App\Http\Controllers\TicketPeseeController::class, 'generatePdf'])->name('tickets-pesee.pdf');
        
        // Section Finance (SÉCURISÉE - Admin + Super-Admin)
        Route::middleware(['admin-or-superadmin', 'security'])->group(function () {
            Route::get('finance', [\App\Http\Controllers\FinanceController::class, 'index'])->name('finance.index');
            Route::get('finance/calcul/{id}', [\App\Http\Controllers\FinanceController::class, 'showCalcul'])->name('finance.show-calcul');
            Route::get('finance/matrice-prix', [\App\Http\Controllers\FinanceController::class, 'matricePrix'])->name('finance.matrice-prix');
            Route::post('finance/matrice-prix', [\App\Http\Controllers\FinanceController::class, 'storeMatricePrix'])->name('finance.store-matrice-prix');
            Route::patch('finance/matrice-prix/{id}/activer', [\App\Http\Controllers\FinanceController::class, 'activerMatricePrix'])->name('finance.activer-matrice-prix');
        });
        
        // Validation ENE CI
        Route::get('ene-validation', [\App\Http\Controllers\EneValidationController::class, 'index'])->name('ene-validation.index');
        Route::get('ene-validation/{id}', [\App\Http\Controllers\EneValidationController::class, 'show'])->name('ene-validation.show');
        Route::post('ene-validation/{id}/validate', [\App\Http\Controllers\EneValidationController::class, 'validate'])->name('ene-validation.validate');
        Route::post('ene-validation/{id}/reject', [\App\Http\Controllers\EneValidationController::class, 'reject'])->name('ene-validation.reject');
        Route::patch('ene-validation/{id}/cancel', [\App\Http\Controllers\EneValidationController::class, 'cancel'])->name('ene-validation.cancel');
        
        // Gestion des Factures (SÉCURISÉE - Admin + Super-Admin)
        Route::middleware(['admin-or-superadmin', 'security'])->group(function () {
            Route::resource('factures', \App\Http\Controllers\FactureController::class);
            Route::post('factures/{facture}/validate', [\App\Http\Controllers\FactureController::class, 'validate'])->name('factures.validate');
            Route::post('factures/{facture}/mark-as-paid', [\App\Http\Controllers\FactureController::class, 'markAsPaid'])->name('factures.mark-as-paid');
            Route::get('factures/{facture}/pdf', [\App\Http\Controllers\FactureController::class, 'generatePdf'])->name('factures.pdf');
            Route::get('factures/{facture}/preview', [\App\Http\Controllers\FactureController::class, 'preview'])->name('factures.preview');
        });
        
        // Farmer Lists
        Route::get('farmer-lists', [\App\Http\Controllers\FarmerListController::class, 'index'])->name('farmer-lists.index');
        Route::get('farmer-lists/{connaissement}', [\App\Http\Controllers\FarmerListController::class, 'show'])->name('farmer-lists.show');
        Route::get('farmer-lists/{connaissement}/create', [\App\Http\Controllers\FarmerListController::class, 'create'])->name('farmer-lists.create');
        Route::post('farmer-lists/{connaissement}', [\App\Http\Controllers\FarmerListController::class, 'store'])->name('farmer-lists.store');
        Route::get('farmer-lists/{farmerList}/edit', [\App\Http\Controllers\FarmerListController::class, 'edit'])->name('farmer-lists.edit');
        Route::put('farmer-lists/{farmerList}', [\App\Http\Controllers\FarmerListController::class, 'update'])->name('farmer-lists.update');
        Route::delete('farmer-lists/{farmerList}', [\App\Http\Controllers\FarmerListController::class, 'destroy'])->name('farmer-lists.destroy');
        Route::get('farmer-lists/{connaissement}/pdf', [\App\Http\Controllers\FarmerListController::class, 'pdf'])->name('farmer-lists.pdf');
        Route::get('farmer-lists/{connaissement}/view', [\App\Http\Controllers\FarmerListController::class, 'view'])->name('farmer-lists.view');

        // Reçus d'achat
        Route::get('farmer-lists/{connaissement}/recus/{farmerList}/create', [\App\Http\Controllers\RecuAchatController::class, 'create'])->name('recus-achat.create');
        Route::post('farmer-lists/{connaissement}/recus/{farmerList}', [\App\Http\Controllers\RecuAchatController::class, 'store'])->name('recus-achat.store');
        Route::get('recus-achat/{recuAchat}', [\App\Http\Controllers\RecuAchatController::class, 'show'])->name('recus-achat.show');
        Route::get('recus-achat/{recuAchat}/edit', [\App\Http\Controllers\RecuAchatController::class, 'edit'])->name('recus-achat.edit');
        Route::put('recus-achat/{recuAchat}', [\App\Http\Controllers\RecuAchatController::class, 'update'])->name('recus-achat.update');
        Route::get('recus-achat/{recuAchat}/pdf', [\App\Http\Controllers\RecuAchatController::class, 'pdf'])->name('recus-achat.pdf');
        
        // Statistiques générales (ACCESSIBLES À TOUS)
        Route::get('statistiques', [StatistiquesController::class, 'index'])->name('statistiques.index');
        
        // Statistiques avancées (SÉCURISÉES - Admin + Super-Admin)
        Route::middleware(['admin-or-superadmin', 'security'])->group(function () {
            Route::get('statistiques/avancees', [StatistiquesController::class, 'avancees'])->name('statistiques.avancees');
        });
        
        // Logs d'Audit (SÉCURISÉS - Super-Admin uniquement)
        Route::middleware(['superadmin', 'security'])->group(function () {
            Route::get('audit-logs', [\App\Http\Controllers\AuditLogController::class, 'index'])->name('audit-logs.index');
            Route::get('audit-logs/{auditLog}', [\App\Http\Controllers\AuditLogController::class, 'show'])->name('audit-logs.show');
            Route::get('audit-logs/export/pdf', [\App\Http\Controllers\AuditLogController::class, 'exportPdf'])->name('audit-logs.export-pdf');
            Route::get('audit-logs/export/excel', [\App\Http\Controllers\AuditLogController::class, 'exportExcel'])->name('audit-logs.export-excel');
            Route::get('audit-logs/stats', [\App\Http\Controllers\AuditLogController::class, 'stats'])->name('audit-logs.stats');
        });
    });
});

        // Routes 2FA (Authentification à deux facteurs)
        Route::prefix('2fa')->name('2fa.')->group(function () {
            // Configuration 2FA
            Route::get('email/setup', [\App\Http\Controllers\TwoFactorController::class, 'showSetup'])->name('email.setup');
            Route::post('email/send-setup', [\App\Http\Controllers\TwoFactorController::class, 'sendSetupCode'])->name('email.send-setup');
            Route::get('email/confirm', [\App\Http\Controllers\TwoFactorController::class, 'showConfirm'])->name('email.confirm');
            Route::post('email/confirm', [\App\Http\Controllers\TwoFactorController::class, 'confirmSetup'])->name('email.confirm');
            
            // Vérification 2FA
            Route::get('verify', [\App\Http\Controllers\TwoFactorController::class, 'showVerify'])->name('verify');
            Route::post('verify', [\App\Http\Controllers\TwoFactorController::class, 'verifyCode'])->name('verify');
            Route::post('resend', [\App\Http\Controllers\TwoFactorController::class, 'sendVerifyCode'])->name('email.send-verify');
            
            // Désactivation 2FA (Super-Admin uniquement)
            Route::post('email/disable', [\App\Http\Controllers\TwoFactorController::class, 'disable'])->name('email.disable');
        });

// Test email (à supprimer après test)
Route::get('/test-email', function () {
    try {
        Mail::raw('Test email FPH-CI depuis votre domaine Hostinger', function ($message) {
            $message->to('mlkfph.ci@gmail.com')
                   ->subject('Test Email FPH-CI - ' . now());
        });
        
        return '✅ Email envoyé avec succès depuis notifications@fphcigrainehevea.com !';
    } catch (\Exception $e) {
        return '❌ Erreur : ' . $e->getMessage();
    }
});

// Debug 2FA (à supprimer après test)
Route::get('/debug-2fa', function () {
    $user = auth()->user();
    
    return [
        'user_id' => $user->id,
        'email' => $user->email,
        'email_2fa_enabled' => $user->email_2fa_enabled,
        'email_2fa_code' => $user->email_2fa_code ? 'Code présent' : 'Aucun code',
        'email_2fa_code_expires_at' => $user->email_2fa_code_expires_at,
        'email_2fa_attempts' => $user->email_2fa_attempts,
        'email_2fa_locked_until' => $user->email_2fa_locked_until,
    ];
});

// Nettoyer 2FA (à supprimer après test)
Route::get('/clean-2fa', function () {
    $user = auth()->user();
    $user->update([
        'email_2fa_enabled' => false,
        'email_2fa_enabled_at' => null,
        'email_2fa_code' => null,
        'email_2fa_code_expires_at' => null,
        'email_2fa_attempts' => 0,
        'email_2fa_locked_until' => null
    ]);
    
    return '✅ Données 2FA nettoyées. Vous pouvez maintenant tester.';
});

// Test envoi code 2FA (à supprimer après test)
Route::get('/test-send-code', function () {
    try {
        $user = auth()->user();
        $service = new \App\Services\Email2FAService();
        
        $result = $service->sendCode($user, 'setup');
        
        if ($result) {
            return '✅ Code envoyé ! Vérifiez votre email.';
        } else {
            return '❌ Erreur envoi code.';
        }
    } catch (\Exception $e) {
        return '❌ Erreur : ' . $e->getMessage();
    }
});

// Test stockage direct (à supprimer après test)
Route::get('/test-store-code', function () {
    try {
        $user = auth()->user();
        
        // Stocker directement en base
        $user->update([
            'email_2fa_code' => '123456',
            'email_2fa_code_expires_at' => now()->addMinutes(5),
            'email_2fa_attempts' => 0,
            'email_2fa_locked_until' => null
        ]);
        
        return '✅ Code stocké directement en base : 123456';
    } catch (\Exception $e) {
        return '❌ Erreur : ' . $e->getMessage();
    }
});

// Test service 2FA (à supprimer après test)
Route::get('/test-service', function () {
    try {
        $user = auth()->user();
        $service = new \App\Services\Email2FAService();
        
        // Test génération de code
        $code = $service->generateCode();
        
        // Test stockage
        $user->update([
            'email_2fa_code' => $code,
            'email_2fa_code_expires_at' => now()->addMinutes(5)
        ]);
        
        return '✅ Code généré : ' . $code . '<br>Stocké en base : ' . ($user->fresh()->email_2fa_code ? 'OUI' : 'NON');
    } catch (\Exception $e) {
        return '❌ Erreur : ' . $e->getMessage();
    }
});

// Test base de données (à supprimer après test)
Route::get('/test-db', function () {
    try {
        $user = auth()->user();
        
        // Test lecture
        $currentCode = $user->email_2fa_code;
        
        // Test écriture
        $user->email_2fa_code = 'TEST123';
        $user->save();
        
        // Test relecture
        $user->refresh();
        $newCode = $user->email_2fa_code;
        
        return '✅ Code actuel : ' . ($currentCode ?: 'NULL') . '<br>Code après save : ' . ($newCode ?: 'NULL');
    } catch (\Exception $e) {
        return '❌ Erreur : ' . $e->getMessage();
    }
});

// Test structure table (à supprimer après test)
Route::get('/test-table', function () {
    try {
        $user = auth()->user();
        
        // Vérifier si les colonnes existent
        $columns = \Schema::getColumnListing('users');
        
        // Vérifier les valeurs actuelles
        $values = $user->only([
            'id', 'email', 'email_2fa_enabled', 'email_2fa_code', 
            'email_2fa_code_expires_at', 'email_2fa_attempts', 'email_2fa_locked_until'
        ]);
        
        return '✅ Colonnes : ' . json_encode($columns) . '<br>Valeurs : ' . json_encode($values);
    } catch (\Exception $e) {
        return '❌ Erreur : ' . $e->getMessage();
    }
});

// Test sauvegarde forcée (à supprimer après test)
Route::get('/test-force-save', function () {
    try {
        $user = auth()->user();
        
        // Sauvegarde forcée
        \DB::table('users')
            ->where('id', $user->id)
            ->update([
                'email_2fa_code' => '111111',
                'email_2fa_code_expires_at' => now()->addMinutes(5),
                'updated_at' => now()
            ]);
        
        // Recharger depuis la base
        $user->refresh();
        
        return '✅ Code forcé : ' . $user->email_2fa_code;
    } catch (\Exception $e) {
        return '❌ Erreur : ' . $e->getMessage();
    }
});

// Test vérification code (à supprimer après test)
Route::get('/test-verify-code', function () {
    try {
        $user = auth()->user();
        $service = new \App\Services\Email2FAService();
        
        // Test avec le code stocké
        $result = $service->verifyCode($user, 'FORCE123');
        
        return '✅ Résultat vérification : ' . json_encode($result);
    } catch (\Exception $e) {
        return '❌ Erreur : ' . $e->getMessage();
    }
});
// Debug session 2FA (à supprimer après test)
Route::get('/debug-session', function () {
    $user = auth()->user();
    
    return [
        'user_id' => $user->id,
        'email' => $user->email,
        'email_2fa_enabled' => $user->email_2fa_enabled,
        'email_2fa_code' => $user->email_2fa_code,
        'email_2fa_code_expires_at' => $user->email_2fa_code_expires_at,
        'session_email_2fa_verified' => session('email_2fa_verified'),
        'all_session' => session()->all()
    ];
});

