<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Services\Email2FAService;
use App\Services\AuditService;

class TwoFactorController extends Controller
{
    protected $email2FAService;

    public function __construct(Email2FAService $email2FAService)
    {
        $this->email2FAService = $email2FAService;
    }

    /**
     * Afficher la page de configuration 2FA
     */
    public function showSetup()
    {
        $user = Auth::user();
        
        if ($this->email2FAService->has2FAEnabled($user)) {
            return redirect()->route('dashboard')->with('info', 'Le 2FA est déjà activé pour votre compte.');
        }

        return view('auth.2fa-setup');
    }

    /**
     * Envoyer le code de configuration 2FA
     */
    public function sendSetupCode(Request $request)
    {
        $user = Auth::user();
        
        if ($this->email2FAService->has2FAEnabled($user)) {
            return redirect()->route('dashboard')->with('info', 'Le 2FA est déjà activé pour votre compte.');
        }

        $success = $this->email2FAService->sendCode($user, 'setup');

        if ($success) {
            return redirect()->route('2fa.email.confirm')->with('success', 'Code de confirmation envoyé à votre adresse email.');
        }

        return back()->with('error', 'Erreur lors de l\'envoi du code. Veuillez réessayer.');
    }

    /**
     * Afficher la page de confirmation du code
     */
    public function showConfirm()
    {
        $user = Auth::user();
        
        if ($this->email2FAService->has2FAEnabled($user)) {
            return redirect()->route('dashboard')->with('info', 'Le 2FA est déjà activé pour votre compte.');
        }

        return view('auth.2fa-confirm');
    }

    /**
     * Confirmer et activer le 2FA
     */
    public function confirmSetup(Request $request)
    {
        $request->validate([
            'code' => 'required|string|size:6'
        ]);

        $user = Auth::user();
        $result = $this->email2FAService->verifyCode($user, $request->code);

        if ($result['success']) {
            // Activer le 2FA
            $this->email2FAService->enable2FA($user);
            
            // Marquer la session comme vérifiée
            session(['email_2fa_verified' => true]);

            // Logger l'activation
            AuditService::log(
                '2FA_ENABLED',
                'Authentification',
                'User',
                $user->id,
                "Activation du 2FA par email pour {$user->email}",
                $user,
                $request
            );

            return redirect()->route('dashboard')->with('success', 'Authentification à deux facteurs activée avec succès !');
        }

        return back()->with('error', $result['message']);
    }

    /**
     * Afficher la page de vérification 2FA
     */
    public function showVerify()
    {
        $user = Auth::user();
        
        if (!$this->email2FAService->has2FAEnabled($user)) {
            return redirect()->route('2fa.email.setup')->with('info', 'Vous devez d\'abord activer le 2FA.');
        }

        return view('auth.2fa-verify-simple');
    }

    /**
     * Envoyer un nouveau code de vérification
     */
    public function sendVerifyCode(Request $request)
    {
        $user = Auth::user();
        
        if (!$this->email2FAService->has2FAEnabled($user)) {
            return redirect()->route('2fa.email.setup')->with('info', 'Vous devez d\'abord activer le 2FA.');
        }

        $success = $this->email2FAService->sendCode($user, 'login');

        if ($success) {
            return back()->with('success', 'Nouveau code envoyé à votre adresse email.');
        }

        return back()->with('error', 'Erreur lors de l\'envoi du code. Veuillez réessayer.');
    }

    /**
     * Vérifier le code 2FA
     */
    public function verifyCode(Request $request)
    {
        $request->validate([
            'code' => 'required|string|size:6'
        ]);

        $user = Auth::user();
        $result = $this->email2FAService->verifyCode($user, $request->code);

        if ($result['success']) {
            // Marquer la session comme vérifiée
            session(['email_2fa_verified' => true]);

            // Logger la vérification
            AuditService::log(
                '2FA_VERIFIED',
                'Authentification',
                'User',
                $user->id,
                "Vérification 2FA réussie pour {$user->email}",
                $user,
                $request
            );

            return redirect()->intended('/dashboard')->with('success', 'Connexion réussie !');
        }

        return back()->with('error', $result['message']);
    }

    /**
     * Désactiver le 2FA (Super-Admin uniquement)
     */
    public function disable(Request $request)
    {
        $user = Auth::user();
        
        if ($user->role !== 'superadmin') {
            abort(403, 'Accès refusé. Seuls les Super-Admin peuvent désactiver le 2FA.');
        }

        $success = $this->email2FAService->disable2FA($user);

        if ($success) {
            // Supprimer la vérification de session
            session()->forget('email_2fa_verified');

            // Logger la désactivation
            AuditService::log(
                '2FA_DISABLED',
                'Authentification',
                'User',
                $user->id,
                "Désactivation du 2FA pour {$user->email}",
                $user,
                $request
            );

            return redirect()->route('dashboard')->with('success', '2FA désactivé avec succès.');
        }

        return back()->with('error', 'Erreur lors de la désactivation du 2FA.');
    }
}
